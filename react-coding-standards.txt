 React UI component’s names should be PascalCase.
 1 All other helper files should be camelCase. (non-component files) 
 All the folder names should be camelCase.
 CSS files should be named the same as the component PascalCase. Global CSS which applies to all components should be placed in global.css and should be named in camelCase. 
 CSS class names should use a standard naming convention (personally use kebab-case because it's used by most of the CSS framework classes) or any standard practice. Document with several conventions
 Test files should be named the same as the component or non-component file
 Use the DRY principle (Don't repeat yourself).
 Create multiple files instead of writing a big file. (Componentization of code: fix to small functionality for each file)
 Place all your CSS files in one common folder.
 Avoid Inline CSS as and when possible (a CSS class should be created when there are more than 2 CSS attributes).
 Use a linter to make your code easier to review. Follow strict linting rules. This in turn helps you write clean, consistent code.
 Split your code into multiple smaller functions. Each with a single responsibility.
 Create many utility files that can help you remove duplicate code from multiple files.
 Separate all your service calls into a separate file. If it’s a big project try to split the services into multiple files. (name convention module_name.service.js).
 Name your files logically according to the job that they perform.
 Use comments to explain complex functions.
 Destructuring your props is a good way to help make your coder cleaner and more maintainable. 
 Use useReducer when useState becomes complex.
 Putting imports in an order                                                                                                                                                 a. React import
 b. Library imports (Alphabetical order)
 c. Absolute imports from the project (Alphabetical order)
 d. Relative imports (Alphabetical order)
 e. Import * as
 f. Import ‘./<some file>.<some extension>                                                                                                                                         Each kind should be separated by an empty line. This makes your imports clean and easy to understand for all the components, 3rd-party libraries, and etc."
 Use index.js for each folder to export (Avoid repeating names on the imports)
 "Indentation and Formatting:                                                                                                                                                a.Use consistent indentation (usually two or four spaces) for better readability.
 b.Use a consistent code formatting style throughout the project.
 c.Consider using a code formatter like Prettier to automate formatting."
 Write shared functionality at one place(eg. error handling, fetch calls, alert, etc)
 No hardcoded Strings should be compare or used directly in codebase. They should be assigned to const KEYWORD and then use it wherever needed.
 Make use of Pure components. Avoid useState to declare the state, we can use common state management library and every state will be maintained there.
 Store important/crucial variables in .env file.
 Error handling should be made standardized and in one file.
 Wherever we have used colors, those should be hex codes. Also, constant color, font should be declared as variable in one CSS file and should be used as variables in other CSS files.
